{
  "@context": "dtmi:dtdl:context;2",
  "@id": "dtmi:io:tributech:stream:base;1",
  "@type": "Interface",
  "displayName": "Stream",
  "contents": [
    {
      "@type": "Property",
      "name": "Name",
      "schema": "string",
      "writable": true,
      "displayName": "Name",
      "description": "Human-readable name of the stream."
    },
    {
      "@type": "Property",
      "name": "ValueMetadataId",
      "schema": "string",
      "writable": true,
      "displayName": "ValueMetadataId",
      "description": "Represents the global unique id (UUID) of a stream."
    },
    {
      "@type": "Property",
      "name": "StreamConfig",
      "writable": true,
      "schema": {
        "@type": "Map",
        "mapKey": {
          "name": "key",
          "schema": "string"
        },
        "mapValue": {
          "name": "value",
          "schema": "string"
        }
      }
    },
    {
      "@type": "Property",
      "name": "MerkleTreeDepth",
      "schema": "integer",
      "writable": true,
      "displayName": "Max Merkle Tree Depth",
      "description": "Maximum depth of the binary merkle tree used for proof generation (e.g. 12). Value used as 2^MerkleTreeDepth.",
      "comment": "Proofs allows to verify integrity and origin of the stream. A proof represents a binary-merkle tree and 2^MerkleTreeDepth values are necessary to build a single proof."
    },
    {
      "@type": "Property",
      "name": "MerkleTreeTimeout",
      "schema": "integer",
      "writable": true,
      "displayName": "Max Merkle Tree Age",
      "description": "Maximum merkle tree age in seconds (e.g. 600).",
      "comment": "If a stream doesn't provides enough values to build an entire merkle tree with the given depth in the given time-period it will be splitted into smaller merkle trees."
    },
    {
      "@type": "Property",
      "name": "SubmissionInterval",
      "schema": "double",
      "writable": true,
      "displayName": "Submission Interval",
      "description": "The estimated data submission interval/frequency of the stream in Hz (e.g. 1.2)."
    },
    {
      "@type": "Property",
      "name": "Encoding",
      "schema": {
        "@type": "Enum",
        "valueSchema": "string",
        "enumValues": [
          {
            "name": "ByteArray",
            "displayName": "Byte Array",
            "enumValue": "BYTEARRAY"
          },
          {
            "name": "Float",
            "displayName": "Float",
            "enumValue": "FLOAT"
          },
          {
            "name": "Double",
            "displayName": "Double",
            "enumValue": "DOUBLE"
          },
          {
            "name": "Int32",
            "displayName": "Int32",
            "enumValue": "INT32"
          },
          {
            "name": "Int64",
            "displayName": "Int64",
            "enumValue": "INT64"
          },
          {
            "name": "String_UTF8",
            "displayName": "String UTF8",
            "enumValue": "STRING_UTF8"
          },
          {
            "name": "String_Base64",
            "displayName": "String Base64",
            "enumValue": "STRING_BASE64"
          }
        ]
      },
      "writable": true,
      "displayName": "Data Encoding",
      "description": "Specifies how the data is encoded."
    },
    {
      "@type": "Telemetry",
      "name": "CurrentValue",
      "schema": {
        "@type": "Object",
        "fields": [
          {
            "name": "String",
            "schema": "string",
            "description": "String-value (UTF-8)."
          },
          {
            "name": "Double",
            "schema": "double",
            "description": "Double-encoded value."
          },
          {
            "name": "Long",
            "schema": "long",
            "description": "Long-encoded value."
          },
          {
            "name": "Boolean",
            "schema": "boolean",
            "description": "Boolean-encoded value."
          },
          {
            "name": "DateTime",
            "schema": "dateTime",
            "description": "DateTime-encoded value."
          },
          {
            "name": "Base64String",
            "schema": "string",
            "description": "Base64-encoded value."
          }
        ],
        "displayName": "Value",
        "description": "Strongly typed value. At least one field must be set. Multiple encodings are possible."
      },
      "displayName": "Current Value",
      "description": "Current value of the stream."
    },
    {
      "@type": "Property",
      "name": "Unit",
      "schema": "string",
      "writable": true,
      "displayName": "Unit",
      "description": "Represents the unit of the stream."
    },
    {
      "@type": "Relationship",
      "name": "Options",
      "minMultiplicity": 0,
      "maxMultiplicity": 1000,
      "target": "dtmi:io:tributech:options:base;1",
      "displayName": "Options",
      "description": "Attach options to the stream to configure its properties."
    },
    {
      "@type": "Relationship",
      "name": "Annotations",
      "minMultiplicity": 0,
      "maxMultiplicity": 1,
      "target": "dtmi:io:tributech:annotations:base;1",
      "displayName": "Annotations",
      "description": "Associated annotations.."
    }
  ]
}